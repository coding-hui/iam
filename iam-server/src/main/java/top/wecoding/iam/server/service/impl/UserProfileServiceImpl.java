package top.wecoding.iam.server.service.impl;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import top.wecoding.commons.core.util.ArgumentAssert;import top.wecoding.iam.common.enums.IamErrorCode;import top.wecoding.iam.common.model.request.CreateUserRequest;import top.wecoding.iam.common.model.request.UpdateUserRequest;import top.wecoding.iam.common.util.AuthUtil;import top.wecoding.iam.server.convert.UserProfileConvert;import top.wecoding.iam.server.entity.UserProfile;import top.wecoding.iam.server.mapper.UserProfileMapper;import top.wecoding.iam.server.service.UserProfileService;import top.wecoding.mybatis.base.BaseServiceImpl;/** * @author liuyuhui * @date 2022/9/12 */@Slf4j@Service@RequiredArgsConstructorpublic class UserProfileServiceImpl extends BaseServiceImpl<UserProfileMapper, UserProfile>    implements UserProfileService {  @Override  public boolean create(String userId, CreateUserRequest createUserRequest) {    String tenantId = AuthUtil.currentTenantId();    UserProfile userProfile = UserProfileConvert.INSTANCE.toUserProfile(createUserRequest);    userProfile.setUserId(userId);    userProfile.setTenantId(tenantId);    return this.save(userProfile);  }  @Override  public boolean update(String userId, UpdateUserRequest updateUserRequest) {    UserProfile oldUserProfile = baseMapper.getByUserId(userId);    ArgumentAssert.notNull(oldUserProfile, IamErrorCode.USER_DOES_NOT_EXIST);    UserProfile userProfile = UserProfileConvert.INSTANCE.toUserProfile(updateUserRequest);    userProfile.setUserId(oldUserProfile.getUserId());    return this.updateById(userProfile);  }  @Override  public boolean delete(String userId) {    return this.removeById(userId);  }}