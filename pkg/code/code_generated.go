// Copyright (c) 2023 coding-hui. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

// Code generated by "codegen -type=int /Users/liuyuhui/Codes/iam/pkg/code"; DO NOT EDIT.

package code

// init register error codes defines in this source code to `github.com/coding-hui/common/errors`
func init() {
	register(ErrUserNotFound, 404, "User not found")
	register(ErrUserAlreadyExist, 400, "User already exists")
	register(ErrUserNameIsEmpty, 400, "Username cannot be empty")
	register(ErrDeleteOneself, 400, "You cannot delete your own account")
	register(ErrUserAlreadyDisabled, 400, "The user is already disabled")
	register(ErrUserAlreadyEnabled, 400, "The user is already enabled")
	register(ErrUserHasDisabled, 401, "Your account has been disabled. Please contact the administrator")
	register(ErrReachMaxCount, 400, "Secret reach the max count")
	register(ErrSecretNotFound, 404, "Secret not found")
	register(ErrPolicyNotFound, 404, "Policy not found")
	register(ErrPolicyAlreadyExist, 400, "Policy already exists")
	register(ErrPolicyNameIsEmpty, 400, "Policy name cannot be empty")
	register(ErrResourceNotFound, 404, "Resource not found")
	register(ErrResourceAlreadyExist, 400, "Resource already exists")
	register(ErrResourceNameIsEmpty, 400, "Resource name cannot be empty")
	register(ErrResourceInstanceIdIsEmpty, 400, "Resource instance ID cannot be empty")
	register(ErrResourceHasAssignedPolicy, 400, "The resource has been assigned permission policies and cannot be deleted")
	register(ErrRoleNotFound, 404, "Role not found")
	register(ErrRoleAlreadyExist, 400, "Role already exists")
	register(ErrRoleNameIsEmpty, 400, "Role name cannot be empty")
	register(ErrRoleHasAssignedUser, 400, "The role has been assigned to users and cannot be deleted")
	register(ErrAssignRoleFailed, 400, "Failed to assign role. Please check the role status or contact the administrator")
	register(ErrUnsupportedAssignTarget, 400, "Unsupported assignment target. Only users or departments are supported")
	register(ErrRevokeRoleFailed, 400, "Failed to revoke role. Please check the role status or contact the administrator")
	register(ErrUnsupportedRevokeTarget, 400, "Unsupported revoke target. Only users or departments are supported")
	register(ErrOrgNotFound, 404, "Organization not found")
	register(ErrOrgAlreadyExist, 400, "Organization already exist")
	register(ErrOrgAlreadyDisabled, 400, "The organization is already disabled")
	register(ErrOrgAlreadyEnabled, 400, "The organization is already enabled")
	register(ErrOrgHasDisabled, 401, "The organization has been disabled")
	register(ErrCannotDeleteBuiltInOrg, 400, "Built-in organizations cannot be deleted")
	register(ErrCannotDisableBuiltInOrg, 400, "Built-in organizations cannot be disabled")
	register(ErrMaxDepartmentsReached, 400, "The number of departments has reached its limit")
	register(ErrMemberAlreadyInDepartment, 400, "Member is already in department")
	register(ErrSubDepartmentsExist, 400, "Sub departments exist and cannot be deleted")
	register(ErrBindExternalAccount, 400, "Failed to bind external account")
	register(ErrUnbindExternalAccount, 400, "Failed to unbind external account")
	register(ErrExternalAccountAlreadyBound, 400, "External account already bound to another user")
	register(ErrApiKeyNotFound, 404, "API Key not found")
	register(ErrApiKeyAlreadyExist, 400, "API Key already exists")
	register(ErrApiKeyInvalid, 401, "Invalid API Key. Please check the key format and ensure it starts with 'sk-'")
	register(ErrApiKeyInactive, 401, "API Key is not active. Please enable the API Key to use it")
	register(ErrApiKeyExpired, 401, "API Key has expired. Please regenerate a new API Key")
	register(ErrApiKeyAlreadyEnabled, 400, "API Key is already enabled")
	register(ErrApiKeyAlreadyDisabled, 400, "API Key is already disabled")
	register(ErrApiKeyGenerationFailed, 500, "Failed to generate unique API Key after multiple attempts. Please try again")
	register(ErrDeviceCodeInvalid, 400, "Invalid device code")
	register(ErrAuthorizationPending, 400, "Authorization pending")
	register(ErrAuthorizationDenied, 400, "Authorization denied by user")
	register(ErrDeviceCodeExpired, 400, "Device code has expired")
	register(ErrClientNotFound, 400, "OAuth client not found")
	register(ErrCannotDeleteSystemEmailTemplate, 403, "Cannot delete system email template")
	register(ErrCannotDeleteDefaultEmailTemplate, 403, "Cannot delete default email template")
	register(ErrCannotDeleteSystemEmailTemplateCategory, 403, "Cannot delete system email template category")
	register(ErrSuccess, 200, "OK")
	register(ErrUnknown, 500, "Internal server error")
	register(ErrBind, 400, "Error occurred while binding the request body to the struct")
	register(ErrValidation, 400, "Validation failed")
	register(ErrParam, 400, "Invalid request params")
	register(ErrPageNotFound, 404, "Page not found")
	register(ErrInvalidRequest, 404, "Invalid request")
	register(ErrDatabase, 500, "Database error")
	register(ErrPrimaryEmpty, 500, "Primary key cannot be empty")
	register(ErrNilEntity, 500, "Entity cannot be nil")
	register(ErrRecordExist, 500, "Data record already exists")
	register(ErrRecordNotExist, 500, "Data record does not exist")
	register(ErrIndexInvalid, 500, "Entity index is invalid")
	register(ErrEntityInvalid, 500, "Entity is invalid")
	register(ErrTableNameEmpty, 500, "Entity table name is empty")
	register(ErrDatabaseConnection, 500, "Database connection error")
	register(ErrDatabaseCreate, 500, "Database create operation error")
	register(ErrDatabaseUpdate, 500, "Database update operation error")
	register(ErrDatabaseDelete, 500, "Database delete operation error")
	register(ErrDatabaseQuery, 500, "Database query operation error")
	register(ErrEncrypt, 401, "Error occurred while encrypting the user password")
	register(ErrTokenInvalid, 401, "Token invalid")
	register(ErrSignatureInvalid, 401, "Signature is invalid")
	register(ErrTokenMalformed, 401, "Token is malformed")
	register(ErrTokenNotValidYet, 401, "Token is not valid yet")
	register(ErrExpired, 401, "Token expired")
	register(ErrTokenIssuedAt, 401, "Token used before issued")
	register(ErrMissingLoginValues, 401, "Missing Username or Password")
	register(ErrInvalidAuthHeader, 401, "Invalid authorization header")
	register(ErrMissingHeader, 401, "The `Authorization` header was empty")
	register(ErrPasswordIncorrect, 401, "Invalid Username or Password")
	register(ErrInvalidRefreshToken, 401, "Refresh token format is incorrect, please check")
	register(ErrUnauthorized, 403, "Unauthorized")
	register(ErrPermissionDenied, 403, "Permission denied")
	register(ErrIdentityProviderNotFound, 401, "Identity provider not found")
	register(ErrEncodingFailed, 500, "Encoding failed due to an error with the data")
	register(ErrDecodingFailed, 500, "Decoding failed due to an error with the data")
	register(ErrInvalidJSON, 500, "Data is not valid JSON")
	register(ErrEncodingJSON, 500, "JSON data could not be encoded")
	register(ErrDecodingJSON, 500, "JSON data could not be decoded")
	register(ErrInvalidYaml, 500, "Data is not valid Yaml")
	register(ErrEncodingYaml, 500, "Yaml data could not be encoded")
	register(ErrDecodingYaml, 500, "Yaml data could not be decoded")
}
