// Copyright (c) 2023 coding-hui. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

// Code generated by "codegen -type=int D:/WorkSpace/WeCoding/Go/iam/internal/pkg/code"; DO NOT EDIT.

package code

// init register error codes defines in this source code to `github.com/coding-hui/common/errors`
func init() {
	register(ErrUserNotFound, 404, "User not found")
	register(ErrUserAlreadyExist, 400, "User already exist")
	register(ErrUserNameIsEmpty, 400, "Username is empty")
	register(ErrDeleteOneself, 400, "Unable to delete yourself")
	register(ErrReachMaxCount, 400, "Secret reach the max count")
	register(ErrSecretNotFound, 404, "Secret not found")
	register(ErrPolicyNotFound, 404, "Policy not found")
	register(ErrResourceNotFound, 404, "Resource not found")
	register(ErrResourceAlreadyExist, 400, "Resource already exist")
	register(ErrResourceNameIsEmpty, 400, "Resource name is empty")
	register(ErrRoleNotFound, 404, "Role not found")
	register(ErrRoleAlreadyExist, 400, "Role already exist")
	register(ErrRoleNameIsEmpty, 400, "Role name is empty")
	register(ErrRoleHasAssignedUser, 400, "The role has been assigned to a user")
	register(ErrAssignRoleFailed, 400, "User role assignment fails. Please check the role status or contact the administrator")
	register(ErrUnsupportedAssignTarget, 400, "The assignment target is not supported. Only user or department are supported")
	register(ErrRevokeRoleFailed, 400, "User role revoke fails. Please check the role status or contact the administrator")
	register(ErrUnsupportedRevokeTarget, 400, "The revoke target is not supported. Only user or department are supported")
	register(ErrSuccess, 200, "OK")
	register(ErrUnknown, 500, "Internal server error")
	register(ErrBind, 400, "Error occurred while binding the request body to the struct")
	register(ErrValidation, 400, "Validation failed")
	register(ErrTokenInvalid, 401, "Token invalid")
	register(ErrPageNotFound, 404, "Page not found")
	register(ErrDatabase, 500, "Database error")
	register(ErrPrimaryEmpty, 500, "Primary key is empty")
	register(ErrNilEntity, 500, "Entity is nil")
	register(ErrRecordExist, 500, "Entity primary key is exist")
	register(ErrRecordNotExist, 500, "Entity primary key is not exist")
	register(ErrIndexInvalid, 500, "Entity index is invalid")
	register(ErrEntityInvalid, 500, "Entity is invalid")
	register(ErrEncrypt, 401, "Error occurred while encrypting the user password")
	register(ErrSignatureInvalid, 401, "Signature is invalid")
	register(ErrTokenMalformed, 401, "Token is malformed")
	register(ErrTokenNotValidYet, 401, "Token is not valid yet")
	register(ErrExpired, 401, "Token expired")
	register(ErrMissingLoginValues, 401, "Missing Username or Password")
	register(ErrInvalidAuthHeader, 401, "Invalid authorization header")
	register(ErrMissingHeader, 401, "The `Authorization` header was empty")
	register(ErrPasswordIncorrect, 401, "Invalid Username or Password")
	register(ErrInvalidRefreshToken, 401, "Refresh token format is incorrect, please check")
	register(ErrPermissionDenied, 403, "Permission denied")
	register(ErrEncodingFailed, 500, "Encoding failed due to an error with the data")
	register(ErrDecodingFailed, 500, "Decoding failed due to an error with the data")
	register(ErrInvalidJSON, 500, "Data is not valid JSON")
	register(ErrEncodingJSON, 500, "JSON data could not be encoded")
	register(ErrDecodingJSON, 500, "JSON data could not be decoded")
	register(ErrInvalidYaml, 500, "Data is not valid Yaml")
	register(ErrEncodingYaml, 500, "Yaml data could not be encoded")
	register(ErrDecodingYaml, 500, "Yaml data could not be decoded")
}
